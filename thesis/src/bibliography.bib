@book{latex,
  title = {LaTeX : A Documentation Preparation System User's Guide and Reference Manual},
  publisher = {Addison-Wesley Professional},
  year = {1994},
  author = {Leslie Lamport}
}
@incollection{lamport2019time,
  title={Time, clocks, and the ordering of events in a distributed system},
  author={Lamport, Leslie},
  booktitle={Concurrency: the Works of Leslie Lamport},
  pages={179--196},
  year={2019}
}
@article{gomes2017verifying,
  title={Verifying strong eventual consistency in distributed systems},
  author={Gomes, Victor BF and Kleppmann, Martin and Mulligan, Dominic P and Beresford, Alastair R},
  journal={Proceedings of the ACM on Programming Languages},
  volume={1},
  number={OOPSLA},
  pages={1--28},
  year={2017},
  publisher={ACM New York, NY, USA}
}
@techreport{kleppmann2022assessing,
  title={Assessing the understandability of a distributed algorithm by tweeting buggy pseudocode},
  author={Kleppmann, Martin},
  year={2022},
  institution={University of Cambridge, Computer Laboratory}
}
@techreport{shapiro2011comprehensive,
  title={A comprehensive study of convergent and commutative replicated data types},
  author={Shapiro, Marc and Pregui{\c{c}}a, Nuno and Baquero, Carlos and Zawirski, Marek},
  year={2011},
  institution={Inria--Centre Paris-Rocquencourt; INRIA}
}
@article{baquero2017pure,
  title={Pure operation-based replicated data types},
  author={Baquero, Carlos and Almeida, Paulo S{\'e}rgio and Shoker, Ali},
  journal={arXiv preprint arXiv:1710.04469},
  year={2017}
}
@manual{nom,
  author = {{The Nom Contributors}},
  title  = {Nom Parser Combinator Framework},
  year   = {2025},
  note   = {\url{https://github.com/rust-bakery/nom}}
}
@manual{automerge,
  author = {{The Automerge Contributors}},
  title  = {Automerge CRDT Library},
  year   = {2024},
  note   = {\url{https://github.com/automerge}}
}
@manual{yjs,
  author = {{The Yjs Contributors}},
  title  = {Yjs CRDT Library},
  year   = {2025},
  note   = {\url{https://github.com/yjs/yjs}}
}
@manual{collabs,
  author = {{The Collabs Contributors}},
  title  = {Collabs CRDT Library},
  year   = {2025},
  note   = {\url{https://github.com/composablesys/collabs}}
}
@manual{loro,
  author = {{The Loro Contributors}},
  title  = {Loro CRDT Library},
  year   = {2025},
  note   = {\url{https://github.com/loro-dev/loro}}
}
@manual{livestore,
  author = {{The LiveStore Contributors}},
  title  = {LiveStore CRDT Library},
  year   = {2025},
  note   = {\url{https://github.com/livestorejs/livestore}}
}
@manual{pgivm,
  author = {{The pg\_ivm Contributors}},
  title  = {pg\_ivm PostgreSQL Extension},
  year   = {2025},
  note   = {\url{https://github.com/sraoss/pg_ivm}}
}
@manual{feldera,
  author = {{The Feldera Contributors}},
  title  = {Feldera and DBSP Library},
  year   = {2025},
  note   = {\url{https://github.com/feldera/feldera}}
}
@manual{ddlog,
  author = {{The Differential Datalog Contributors}},
  title  = {Differential Datalog},
  year   = {2025},
  note   = {\url{https://github.com/vmware-archive/differential-datalog}}
}
@inproceedings{kleppmann2019local,
  author = {Kleppmann, Martin and Wiggins, Adam and van Hardenberg, Peter and McGranaghan, Mark},
  title = {Local-first software: you own your data, in spite of the cloud},
  year = {2019},
  isbn = {9781450369954},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3359591.3359737},
  doi = {10.1145/3359591.3359737},
  abstract = {Cloud apps like Google Docs and Trello are popular because they enable real-time collaboration with colleagues, and they make it easy for us to access our work from all of our devices. However, by centralizing data storage on servers, cloud apps also take away ownership and agency from users. If a service shuts down, the software stops functioning, and data created with that software is lost. In this article we propose local-first software, a set of principles for software that enables both   collaboration and ownership for users. Local-first ideals include the ability to work offline and collaborate across multiple devices, while also improving the security, privacy, long-term preservation, and user control of data. We survey existing approaches to data storage and sharing, ranging from email attachments to web apps to Firebase-backed mobile apps, and we examine the trade-offs of each. We look at Conflict-free Replicated Data Types (CRDTs): data structures that are multi-user from the ground   up while also being fundamentally local and private. CRDTs have the potential to be a foundational technology for realizing local-first software. We share some of our findings from developing local-first software prototypes at the Ink \& Switch research lab over the course of several years. These experiments test the viability of CRDTs in practice, and explore the user interface challenges for this new data model. Lastly, we suggest some next steps for moving towards local-first software: for researchers,   for app developers, and a startup opportunity for entrepreneurs.},
  booktitle = {Proceedings of the 2019 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
  pages = {154â€“178},
  numpages = {25},
  keywords = {CRDTs, collaboration software, data ownership, mobile computing, peer-to-peer communication},
  location = {Athens, Greece},
  series = {Onward! 2019}
}
@article{preguicca2018conflict,
  title   = {Conflict-free replicated data types: An overview},
  author  = {Pregui{\c{c}}a, Nuno},
  journal = {arXiv preprint arXiv:1806.10254},
  year    = {2018}
}
@inproceedings{stewen2024undo,
  title={Undo and Redo Support for Replicated Registers},
  author={Stewen, Leo and Kleppmann, Martin},
  booktitle={Proceedings of the 11th Workshop on Principles and Practice of Consistency for Distributed Data},
  pages={1--7},
  year={2024}
}
@article{budiu2022dbsp,
  title={DBSP: Automatic incremental view maintenance for rich query languages},
  author={Budiu, Mihai and McSherry, Frank and Ryzhyk, Leonid and Tannen, Val},
  journal={arXiv preprint arXiv:2203.16684},
  year={2022}
}
@article{budiu2024dbsp,
  title={DBSP: Incremental Computation on Streams and Its Applications to Databases},
  author={Budiu, Mihai and Chajed, Tej and McSherry, Frank and Ryzhyk, Leonid and Tannen, Val},
  journal={ACM SIGMOD Record},
  volume={53},
  number={1},
  pages={87--95},
  year={2024},
  publisher={ACM New York, NY, USA}
}
@article{budiu2025dbsp,
  title={DBSP: automatic incremental view maintenance for rich query languages},
  author={Budiu, Mihai and Ryzhyk, Leonid and Zellweger, Gerd and Pfaff, Ben and Suresh, Lalith and Kassing, Simon and Gyawali, Abhinav and Budiu, Matei and Chajed, Tej and McSherry, Frank and others},
  journal={The VLDB Journal},
  volume={34},
  number={4},
  pages={1--28},
  year={2025},
  publisher={Springer}
}
@inproceedings{mcsherry2013differential,
  title={Differential dataflow.},
  author={McSherry, Frank and Murray, Derek Gordon and Isaacs, Rebecca and Isard, Michael},
  booktitle={CIDR},
  year={2013}
}
@article{abo2024convergence,
  title={Convergence of datalog over (pre-) semirings},
  author={Abo Khamis, Mahmoud and Ngo, Hung Q and Pichler, Reinhard and Suciu, Dan and Wang, Yisu Remy},
  journal={Journal of the ACM},
  volume={71},
  number={2},
  pages={1--55},
  year={2024},
  publisher={ACM New York, NY}
}
@article{green2013datalog,
  title={Datalog and recursive query processing},
  author={Green, Todd J and Huang, Shan Shan and Loo, Boon Thau and Zhou, Wenchao},
  journal={Foundations and Trends{\textregistered} in Databases},
  volume={5},
  number={2},
  pages={105--195},
  year={2013},
  publisher={Now Publishers, Inc.}
}
@misc{kleppmann2018data,
  title={Data structures as queries: Expressing CRDTs using Datalog},
  author={Kleppmann, Martin},
  year={2018}
}
@article{laddad2022keep,
  title={Keep CALM and CRDT on},
  author={Laddad, Shadaj and Power, Conor and Milano, Mae and Cheung, Alvin and Crooks, Natacha and Hellerstein, Joseph M},
  journal={arXiv preprint arXiv:2210.12605},
  year={2022}
}
@inproceedings{neumann2024critique,
  title={A Critique of Modern SQL and a Proposal Towards a Simple and Expressive Query Language.},
  author={Neumann, Thomas and Leis, Viktor},
  booktitle={CIDR},
  year={2024}
}
@inproceedings{hirn2023fix,
  title={A Fix for the Fixation on Fixpoints.},
  author={Hirn, Denis and Grust, Torsten},
  booktitle={CIDR},
  year={2023}
}
@online{mcsherry2022recursion,
  author = {McSherry, Frank},
  title = {Recursion in Materialize},
  year = 2022,
  url = {https://web.archive.org/web/20241126143413/https://github.com/frankmcsherry/blog/blob/master/posts/2022-12-25.md},
  urldate = {2024-11-26}
}
@online{sampson2023flattening,
  author = {Sampson, Adrian},
  title = {Flattening ASTs (and Other Compiler Data Structures)},
  year = 2023,
  url = {https://web.archive.org/web/20250613165634/https://www.cs.cornell.edu/~asampson/blog/flattening.html},
  urldate = {2025-07-03}
}
@article{khamis2022datalog,
  title={Datalog in wonderland},
  author={Khamis, Mahmoud Abo and Ngo, Hung Q and Pichler, Reinhard and Suciu, Dan and Remy Wang, Yisu},
  journal={ACM SIGMOD Record},
  volume={51},
  number={2},
  pages={6--17},
  year={2022},
  publisher={ACM New York, NY, USA}
}
@article{sanjuan2020merkle,
  title={Merkle-crdts: Merkle-dags meet crdts},
  author={Sanjuan, Hector and Poyhtari, Samuli and Teixeira, Pedro and Psaras, Ioannis},
  journal={arXiv preprint arXiv:2004.00107},
  year={2020}
}
@inproceedings{auvolat2019merkle,
  title={Merkle search trees: Efficient state-based CRDTs in open networks},
  author={Auvolat, Alex and Ta{\"\i}ani, Fran{\c{c}}ois},
  booktitle={2019 38th Symposium on Reliable Distributed Systems (SRDS)},
  pages={221--22109},
  year={2019},
  organization={IEEE}
}
@misc{schiefer2022building,
  title={Building Data-Centric Apps with a Reactive Relational Database},
  author={Schiefer, Nicholas and Litt, Geoffrey and Schickling, Johannes and Jackson, Daniel},
  year={2022}
}
@article{kleppmann2024bluesky,
  title={Bluesky and the AT protocol: Usable decentralized social media},
  author={Kleppmann, Martin and Frazee, Paul and Gold, Jake and Graber, Jay and Holmgren, Daniel and Ivy, Devin and Johnson, Jeromy and Newbold, Bryan and Volpert, Jaz},
  journal={arXiv preprint arXiv:2402.03239},
  year={2024}
}
@inproceedings{kleppmann2022making,
  title={Making crdts byzantine fault tolerant},
  author={Kleppmann, Martin},
  booktitle={Proceedings of the 9th Workshop on Principles and Practice of Consistency for Distributed Data},
  pages={8--15},
  year={2022}
}
@inproceedings{litt2023riffle,
  title={Riffle: Reactive Relational State for Local-First Applications},
  author={Litt, Geoffrey and Schiefer, Nicholas and Schickling, Johannes and Jackson, Daniel},
  booktitle={Proceedings of the 36th Annual ACM Symposium on User Interface Software and Technology},
  pages={1--16},
  year={2023}
}
@online{ditto,
  author = {{Dittolive Incorporated}},
  title = {Dittolive's Homepage},
  year = 2025,
  url = {https://web.archive.org/web/20250613135524/https://www.ditto.com/},
  urldate = {2025-06-13}
}
@article{gupta1995maintenance,
  title={Maintenance of materialized views: Problems, techniques, and applications},
  author={Gupta, Ashish and Mumick, Inderpal Singh and others},
  journal={IEEE Data Eng. Bull.},
  volume={18},
  number={2},
  pages={3--18},
  year={1995}
}
@article{gupta1993maintaining,
  title={Maintaining views incrementally},
  author={Gupta, Ashish and Mumick, Inderpal Singh and Subrahmanian, Venkatramanan Siva},
  journal={ACM SIGMOD Record},
  volume={22},
  number={2},
  pages={157--166},
  year={1993},
  publisher={ACM New York, NY, USA}
}
@article{neumann2011efficiently,
  title={Efficiently compiling efficient query plans for modern hardware},
  author={Neumann, Thomas},
  journal={Proceedings of the VLDB Endowment},
  volume={4},
  number={9},
  pages={539--550},
  year={2011},
  publisher={VLDB Endowment}
}
@article{zukowski2005monetdb,
  title={MonetDB/X100-A DBMS In The CPU Cache.},
  author={Zukowski, Marcin and Boncz, Peter A and Nes, Niels and H{\'e}man, S{\'a}ndor},
  journal={IEEE Data Eng. Bull.},
  volume={28},
  number={2},
  pages={17--22},
  year={2005}
}
@article{kersten2018everything,
  title={Everything you always wanted to know about compiled and vectorized queries but were afraid to ask},
  author={Kersten, Timo and Leis, Viktor and Kemper, Alfons and Neumann, Thomas and Pavlo, Andrew and Boncz, Peter},
  journal={Proceedings of the VLDB Endowment},
  volume={11},
  number={13},
  pages={2209--2222},
  year={2018},
  publisher={VLDB Endowment}
}
@inproceedings{selinger1979access,
  title={Access path selection in a relational database management system},
  author={Selinger, P Griffiths and Astrahan, Morton M and Chamberlin, Donald D and Lorie, Raymond A and Price, Thomas G},
  booktitle={Proceedings of the 1979 ACM SIGMOD international conference on Management of data},
  pages={23--34},
  year={1979}
}
@inproceedings{idris2017dynamic,
  title={The dynamic yannakakis algorithm: Compact and efficient query processing under updates},
  author={Idris, Muhammad and Ugarte, Mart{\'\i}n and Vansummeren, Stijn},
  booktitle={Proceedings of the 2017 ACM International Conference on Management of Data},
  pages={1259--1274},
  year={2017}
}
@inproceedings{green2007provenance,
  title={Provenance semirings},
  author={Green, Todd J and Karvounarakis, Grigoris and Tannen, Val},
  booktitle={Proceedings of the twenty-sixth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems},
  pages={31--40},
  year={2007}
}
@incollection{apt1988towards,
  title={Towards a theory of declarative knowledge},
  author={Apt, Krzysztof R and Blair, Howard A and Walker, Adrian},
  booktitle={Foundations of deductive databases and logic programming},
  pages={89--148},
  year={1988},
  publisher={Elsevier}
}
@article{kahn1962topological,
  title={Topological sorting of large networks},
  author={Kahn, Arthur B},
  journal={Communications of the ACM},
  volume={5},
  number={11},
  pages={558--562},
  year={1962},
  publisher={ACM New York, NY, USA}
}
@InProceedings{verifx,
  author =	{De Porre, Kevin and Ferreira, Carla and Gonzalez Boix, Elisa},
  title =	{{VeriFx: Correct Replicated Data Types for the Masses}},
  booktitle =	{37th European Conference on Object-Oriented Programming (ECOOP 2023)},
  pages =	{9:1--9:45},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-281-5},
  ISSN =	{1868-8969},
  year =	{2023},
  volume =	{263},
  editor =	{Ali, Karim and Salvaneschi, Guido},
  publisher =	{Schloss Dagstuhl -- Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.ECOOP.2023.9},
  URN =		{urn:nbn:de:0030-drops-182028},
  doi =		{10.4230/LIPIcs.ECOOP.2023.9},
  annote =	{Keywords: distributed systems, eventual consistency, replicated data types, verification}
}
@article{propel,
  author = {Zakhour, George and Weisenburger, Pascal and Salvaneschi, Guido},
  title = {Type-Checking CRDT Convergence},
  year = {2023},
  issue_date = {June 2023},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {7},
  number = {PLDI},
  url = {https://doi.org/10.1145/3591276},
  doi = {10.1145/3591276},
  abstract = {Conflict-Free Replicated Data Types (CRDTs) are a recent approach for keeping replicated data consistent while guaranteeing the absence of conflicts among replicas. For correct operation, CRDTs rely on a merge function that is commutative, associative and idempotent. Ensuring that such algebraic properties are satisfied by implementations, however, is left to the programmer, resulting in a process that is complex and error-prone. While techniques based on testing, automatic verification of a   model, and mechanized or handwritten proofs are available, we lack an approach that is able to verify such properties on concrete CRDT implementations.   In this paper, we present Propel, a programming language with a type system that captures the algebraic properties required by a correct CRDT implementation. The Propel type system deduces such properties by case analysis and induction: sum types guide the case analysis and algebraic properties in function types enable induction for free. Propelâ€™s key   feature is its capacity to reason about algebraic properties (a) in terms of rewrite rules and (b) to derive the equality or inequality of expressions from the properties. We provide an implementation of Propel as a Scala embedding, we implement several CRDTs, verify them with Propel and compare the verification process with four state-of-the-art verification tools. Our evaluation shows that Propel is able to automatically deduce the properties that are relevant for common CRDT implementations found in   open-source libraries even in cases in which competitors timeout.},
  journal = {Proc. ACM Program. Lang.},
  month = jun,
  articleno = {162},
  numpages = {24},
  keywords = {Verification, Type Systems, Conflict-Free Replicated Data Types}
}
@article{lore,
    author = {Haas, Julian and Mogk, Ragnar and Yanakieva, Elena and Bieniusa, Annette and Mezini, Mira},
    title = {LoRe: A Programming Model for Verifiably Safe Local-first Software},
    year = {2024},
    issue_date = {March 2024},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {46},
    number = {1},
    issn = {0164-0925},
    url = {https://doi.org/10.1145/3633769},
    doi = {10.1145/3633769},
    abstract = {Local-first software manages and processes private data locally while still enabling collaboration between multiple parties connected via partially unreliable networks. Such software typically involves interactions with users and the execution environment (the outside world). The unpredictability of such interactions paired with their decentralized nature make reasoning about the correctness of local-first software a challenging endeavor. Yet, existing solutions to develop local-first software do not provide support for automated safety guarantees and instead expect developers to reason about concurrent interactions in an environment with unreliable network conditions. We propose LoRe, a programming model and compiler that automatically verifies developer-supplied safety properties for local-first applications. LoRe combines the declarative data flow of reactive programming with static analysis and verification techniques to precisely determine concurrent interactions that violate safety invariants and to selectively employ strong consistency through coordination where required. We propose a formalized proof principle and demonstrate how to automate the process in a prototype implementation that outputs verified executable code. Our evaluation shows that LoRe simplifies the development of safe local-first software when compared to state-of-the-art approaches and that verification times are acceptable.},
    journal = {ACM Trans. Program. Lang. Syst.},
    month = jan,
    articleno = {2},
    numpages = {26},
    keywords = {Local-first software, reactive programming, invariants, consistency, automatic verification}
}
@article{bailis2014coordination,
    author = {Bailis, Peter and Fekete, Alan and Franklin, Michael J. and Ghodsi, Ali and Hellerstein, Joseph M. and Stoica, Ion},
    title = {Coordination avoidance in database systems},
    year = {2014},
    issue_date = {November 2014},
    publisher = {VLDB Endowment},
    volume = {8},
    number = {3},
    issn = {2150-8097},
    url = {https://doi.org/10.14778/2735508.2735509},
    doi = {10.14778/2735508.2735509},
    abstract = {Minimizing coordination, or blocking communication between concurrently executing operations, is key to maximizing scalability, availability, and high performance in database systems. However, uninhibited coordination-free execution can compromise application correctness, or consistency. When is coordination necessary for correctness? The classic use of serializable transactions is sufficient to maintain correctness but is not necessary for all applications, sacrificing potential scalability. In this paper, we develop a formal framework, invariant confluence, that determines whether an application requires coordination for correct execution. By operating on application-level invariants over database states (e.g., integrity constraints), invariant confluence analysis provides a necessary and sufficient condition for safe, coordination-free execution. When programmers specify their application invariants, this analysis allows databases to coordinate only when anomalies that might violate invariants are possible. We analyze the invariant confluence of common invariants and operations from real-world database systems (i.e., integrity constraints) and applications and show that many are invariant confluent and therefore achievable without coordination. We apply these results to a proof-of-concept coordination-avoiding database prototype and demonstrate sizable performance gains compared to serializable execution, notably a 25-fold improvement over prior TPC-C New-Order performance on a 200 server cluster.},
    journal = {Proc. VLDB Endow.},
    month = nov,
    pages = {185â€“196},
    numpages = {12}
}
@book{nystrom2021crafting,
    title={Crafting interpreters},
    author={Nystrom, Robert},
    year={2021},
    publisher={Genever Benning}
}
@article{moveop1,
  author={Kleppmann, Martin and Mulligan, Dominic P. and Gomes, Victor B. F. and Beresford, Alastair R.},
  journal={IEEE Transactions on Parallel and Distributed Systems},
  title={A Highly-Available Move Operation for Replicated Trees},
  year={2022},
  volume={33},
  number={7},
  pages={1711-1724},
  keywords={Internet;Synchronization;Computer bugs;XML;Software;Drives;Data models;Conflict-free replicated data types (CRDTs);formal verification;distributed filesystems;distributed collaboration},
  doi={10.1109/TPDS.2021.3118603}
}
@inproceedings{moveop2,
  author = {Da, Liangrun and Kleppmann, Martin},
  title = {Extending JSON CRDTs with Move Operations},
  year = {2024},
  isbn = {9798400705441},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3642976.3653030},
  doi = {10.1145/3642976.3653030},
  abstract = {Conflict-Free Replicated Data Types (CRDTs) for JSON allow users to concurrently update a JSON document and automatically merge the updates into a consistent state. Moving a subtree in a map or reordering elements in a list within a JSON CRDT is challenging: naive merge algorithms may introduce unexpected results such as duplicates or cycles. In this paper, we introduce an algorithm for move operations in a JSON CRDT that handles the interaction with concurrent non-move operations, and uses novel optimisations to improve performance. We plan to integrate this algorithm into the Automerge CRDT library.},
  booktitle = {Proceedings of the 11th Workshop on Principles and Practice of Consistency for Distributed Data},
  pages = {8â€“14},
  numpages = {7},
  keywords = {conflict-free replicated data types, replica consistency, JSON, tree data structures, move operation},
  location = {Athens, Greece},
  series = {PaPoC '24}
}
@inproceedings{logoot,
  author={Weiss, Stephane and Urso, Pascal and Molli, Pascal},
  booktitle={2009 29th IEEE International Conference on Distributed Computing Systems},
  title={Logoot: A Scalable Optimistic Replication Algorithm for Collaborative Editing on P2P Networks},
  year={2009},
  volume={},
  number={},
  pages={404-412},
  keywords={Radiofrequency interference;Wikipedia;Scalability;International collaboration;Costs;Control systems;Convergence;Distributed computing;Collaborative tools;Online Communities/Technical Collaboration;P2P;Collaborative Editing},
  doi={10.1109/ICDCS.2009.75}
}
@inproceedings{treedoc,
  author={Preguica, Nuno and Marques, Joan Manuel and Shapiro, Marc and Letia, Mihai},
  booktitle={2009 29th IEEE International Conference on Distributed Computing Systems},
  title={A Commutative Replicated Data Type for Cooperative Editing},
  year={2009},
  volume={},
  number={},
  pages={395-403},
  keywords={Binary trees;Concurrency control;History;Convergence;Concurrent computing;Compaction;Distributed computing;Delay;Automatic control;Writing;commutative replicated data type;distributed algorithms;replicated data;co-operative editing;dense identifier space},
  doi={10.1109/ICDCS.2009.20}
}
@article{rga,
  author = {Roh, Hyun-Gul and Jeon, Myeongjae and Kim, Jin-Soo and Lee, Joonwon},
  title = {Replicated abstract data types: Building blocks for collaborative applications},
  year = {2011},
  issue_date = {March, 2011},
  publisher = {Academic Press, Inc.},
  address = {USA},
  volume = {71},
  number = {3},
  issn = {0743-7315},
  url = {https://doi.org/10.1016/j.jpdc.2010.12.006},
  doi = {10.1016/j.jpdc.2010.12.006},
  abstract = {For distributed applications requiring collaboration, responsive and transparent interactivity is highly desired. Though such interactivity can be achieved with optimistic replication, maintaining replica consistency is difficult. To support efficient implementations of collaborative applications, this paper extends a few representative abstract data types (ADTs), such as arrays, hash tables, and growable arrays (or linked lists), into replicated abstract data types (RADTs). In RADTs, a shared   ADT is replicated and modified with optimistic operations. Operation commutativity and precedence transitivity are two principles enabling RADTs to maintain consistency despite different execution orders. Especially, replicated growable arrays (RGAs) support insertion/deletion/update operations. Over previous approaches to the optimistic insertion and deletion, RGAs show significant improvement in performance, scalability, and reliability.},
  journal = {J. Parallel Distrib. Comput.},
  month = mar,
  pages = {354â€“368},
  numpages = {15},
  keywords = {Collaboration, Distributed data structures, Optimistic algorithm, Optimistic replication, Replicated abstract data types}
}
@misc{fugue,
  title={The Art of the Fugue: Minimizing Interleaving in Collaborative Text Editing},
  author={Matthew Weidner and Martin Kleppmann},
  year={2023},
  eprint={2305.00583},
  archivePrefix={arXiv},
  primaryClass={cs.DC},
  url={https://arxiv.org/abs/2305.00583},
}
@inproceedings{egwalker,
  author = {Gentle, Joseph and Kleppmann, Martin},
  title = {Collaborative Text Editing with Eg-walker: Better, Faster, Smaller},
  year = {2025},
  isbn = {9798400711961},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3689031.3696076},
  doi = {10.1145/3689031.3696076},
  abstract = {Collaborative text editing algorithms allow several users to concurrently modify a text file, and automatically merge concurrent edits into a consistent state. Existing algorithms fall in two categories: Operational Transformation (OT) algorithms are slow to merge files that have diverged substantially due to offline editing; CRDTs are slow to load and consume a lot of memory. We introduce Eg-walker, a collaboration algorithm for text that avoids these weaknesses. Compared to existing CRDTs, it   consumes an order of magnitude less memory in the steady state, and loading a document from disk is orders of magnitude faster. Compared to OT, merging long-running branches is orders of magnitude faster. In the worst case, the merging performance of Eg-walker is comparable with existing CRDT algorithms. Eg-walker can be used everywhere CRDTs are used, including peer-to-peer systems without a central server. By offering performance that is competitive with centralised algorithms, our result paves the way   towards the widespread adoption of peer-to-peer collaboration software.},
  booktitle = {Proceedings of the Twentieth European Conference on Computer Systems},
  pages = {311â€“328},
  numpages = {18},
  keywords = {CRDTs, collaborative text editing, operational transformation, strong eventual consistency},
  location = {Rotterdam, Netherlands},
  series = {EuroSys '25}
}
